<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lean community blog</title><link>https://leanprover-community.github.io/blog/</link><description>This is the blog of the Lean prover community.</description><atom:link href="https://leanprover-community.github.io/blog/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:"&gt;The Lean prover community&lt;/a&gt; </copyright><lastBuildDate>Wed, 22 Sep 2021 19:43:39 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>The Radon-Nikodym theorem in Lean</title><link>https://leanprover-community.github.io/blog/posts/the-radon-nikodym-theorem-in-lean/</link><dc:creator>Kexing Ying</dc:creator><description>&lt;div&gt;&lt;p&gt;I have for the past two months been working on formalising the Radon-Nikodym theorem 
in Lean, and with &lt;a href="https://github.com/leanprover-community/mathlib/pull/9065"&gt;PR #9065&lt;/a&gt; 
merged into mathlib, this journey seems to have finally come to an end. &lt;/p&gt;
&lt;p&gt;The Radon-Nikodym theorem provides a necessary and sufficient condition for 
comparing two measures, and allows us (under certain conditions) to express 
one measure in terms of another.
The Radon-Nikodym theorem is an important result in measure theory and has a
wide range of applications in different fields of mathematics. Most notably, 
it can be applied in probability theory in the definition 
of the conditional expectation and in mathematical finance through the Girsanov 
theorem&lt;a href="https://en.wikipedia.org/wiki/Radon%E2%80%93Nikodym_theorem#Applications"&gt;¹&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Given two measures $\mu$ and $\nu$ on $\alpha$, we say that $\mu$ is 
&lt;em&gt;absolutely continuous&lt;/em&gt; with respect to $\nu$ (and write $\mu \ll \nu$) if for all 
$S \subseteq \alpha$, $\nu(S) = 0$ implies $\mu(S) = 0$. Absolutely continuity 
is an important notion for measures and we would like to establish a condition 
for when it is true. &lt;/p&gt;
&lt;p&gt;Given a measure $\mu$ on $\alpha$ and a measurable function 
$f : \alpha \to \overline{\mathbb{R}}_{\ge 0}$, the set function 
$$S \mapsto \int_S f \text{ d} \mu$$
is also a measure on $\alpha$ and we denote this measure by $f\mu$. It is 
easy, and intuitive to see that $f\mu \ll \mu$, however, it is not clear 
whether the reverse is true. The Radon-Nikodym theorem proves the reverse 
implication for certain measures.&lt;/p&gt;
&lt;p&gt;In Lean, this project spanned over six files most of which can be found 
in &lt;code&gt;measure_theory/decomposition&lt;/code&gt;, of which 
&lt;code&gt;absolutely_continuous_iff_with_density_radon_nikodym_deriv_eq&lt;/code&gt; and 
&lt;code&gt;absolutely_continuous_iff_with_densityᵥ_radon_nikodym_deriv_eq&lt;/code&gt; are the 
Radon-Nikodym theorem for positive measures and signed measures respectively.
While the Radon-Nikodym theorem is the main motivation, the proof of the theorem 
itself is rather simple once we have the prerequisites that are the 
Jordan decomposition theorem and the Lebesgue decomposition theorem.&lt;/p&gt;
&lt;p&gt;The Jordan decomposition theorem uniquely classifies signed measures and allows 
us to express every signed measure as a difference between two (mutually singular) 
positive measures. While the theorem itself follows from the signed Hahn decomposition, 
defining the structure of Jordan decompositions in Lean was tricky. While 
initially, the decomposition was defined as a proposition, thanks to the suggestions 
from the maintainers, it was decided to define the decomposition as a structure. &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kd"&gt;structure&lt;/span&gt; &lt;span class="n"&gt;jordan_decomposition&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;α&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Type&lt;/span&gt;&lt;span class="bp"&gt;*&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;measurable_space&lt;/span&gt; &lt;span class="n"&gt;α&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos_part&lt;/span&gt; &lt;span class="n"&gt;neg_part&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;measure&lt;/span&gt; &lt;span class="n"&gt;α&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos_part_finite&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;is_finite_measure&lt;/span&gt; &lt;span class="n"&gt;pos_part&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;neg_part_finite&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;is_finite_measure&lt;/span&gt; &lt;span class="n"&gt;neg_part&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mutually_singular&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pos_part&lt;/span&gt; &lt;span class="bp"&gt;⊥ₘ&lt;/span&gt; &lt;span class="n"&gt;neg_part&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This was important, as later on, it was discovered that we were able to 
relax some conditions on the uniqueness property of the Lebesgue decomposition 
by introducing scalar multiplication on Jordan decompositions. Furthermore, 
as we would often like to transport between signed measures and Jordan 
decompositions, it is easier to work with types rather than propositions since 
this required a construction of an equivalence between the two types. &lt;/p&gt;
&lt;p&gt;A similar situation was reached with the Lebesgue decomposition. The Lebesgue 
decomposition states that given two $\sigma$-finite measures $\mu$ and $\nu$, 
there exists a measurable function $f : \alpha \to \overline{\mathbb{R}}_{\ge 0}$ 
and a finite measure $\xi$ such that $\xi$ is mutually singular with respect 
to $\nu$ (denoted $\xi \perp \nu$) and $\mu = \xi + f\nu$.
As with the Jordan decomposition theorem, it was not clear how to represent this 
statement. In particular, it is important for us to be able to extract the aforementioned 
$f$ from the decomposition as this is the Radon-Nikodym derivative. After different
experimentations, the statement was in the end decided to be represented as 
a class instance. &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="n"&gt;have_lebesgue_decomposition&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;μ&lt;/span&gt; &lt;span class="n"&gt;ν&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;measure&lt;/span&gt; &lt;span class="n"&gt;α&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Prop&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lebesgue_decomposition&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="bp"&gt;∃&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;measure&lt;/span&gt; &lt;span class="n"&gt;α&lt;/span&gt; &lt;span class="bp"&gt;×&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;α&lt;/span&gt; &lt;span class="bp"&gt;→&lt;/span&gt; &lt;span class="n"&gt;ℝ&lt;/span&gt;&lt;span class="bp"&gt;≥&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="bp"&gt;∞&lt;/span&gt;&lt;span class="o"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;measurable&lt;/span&gt; &lt;span class="n"&gt;p.2&lt;/span&gt; &lt;span class="bp"&gt;∧&lt;/span&gt; &lt;span class="n"&gt;p.1&lt;/span&gt; &lt;span class="bp"&gt;⊥ₘ&lt;/span&gt; &lt;span class="n"&gt;ν&lt;/span&gt; &lt;span class="bp"&gt;∧&lt;/span&gt; &lt;span class="n"&gt;μ&lt;/span&gt; &lt;span class="bp"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p.1&lt;/span&gt; &lt;span class="bp"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ν.with_density&lt;/span&gt; &lt;span class="n"&gt;p.2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Since in order to prove the Lebesgue decomposition for $\sigma$-finite measures, 
we will first need to show it for finite measures, this definition allows us 
to reuse the same statement for both cases, avoiding duplicate code. Furthermore, 
as we would like to extract the measure and measurable function from the decomposition, 
we may define functions that chooses the decomposition if it exists, and 
zero otherwise.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;singular_part&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;μ&lt;/span&gt; &lt;span class="n"&gt;ν&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;measure&lt;/span&gt; &lt;span class="n"&gt;α&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;measure&lt;/span&gt; &lt;span class="n"&gt;α&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;have_lebesgue_decomposition&lt;/span&gt; &lt;span class="n"&gt;μ&lt;/span&gt; &lt;span class="n"&gt;ν&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;classical.some&lt;/span&gt; &lt;span class="n"&gt;h.lebesgue_decomposition&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;radon_nikodym_deriv&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;μ&lt;/span&gt; &lt;span class="n"&gt;ν&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;measure&lt;/span&gt; &lt;span class="n"&gt;α&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;α&lt;/span&gt; &lt;span class="bp"&gt;→&lt;/span&gt; &lt;span class="n"&gt;ℝ&lt;/span&gt;&lt;span class="bp"&gt;≥&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="bp"&gt;∞&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;have_lebesgue_decomposition&lt;/span&gt; &lt;span class="n"&gt;μ&lt;/span&gt; &lt;span class="n"&gt;ν&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;classical.some&lt;/span&gt; &lt;span class="n"&gt;h.lebesgue_decomposition&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;With the Lebesgue decomposition for $\sigma$-finite measures formalized, the 
Radon-Nikodym theorem follows easily. Furthermore, the generalisation of the 
Radon-Nikodym theorem to signed measures follows also, simply by utilising 
the Jordan decomposition and realising the Radon-Nikodym derivative of 
the signed measure is the difference of the Radon-Nikodym derivative of 
the parts of the Jordan decomposition. However, using this definition of the 
Radon-Nikodym derivative for the signed measures possess a problem, in which 
proving any properties about them requires an absolutely continuous condition.
Thus, it was decided to generalise the Lebesgue decomposition theorem for 
signed measures from which we obtain the general Radon-Nikodym theorem.&lt;/p&gt;
&lt;p&gt;Similar to the Lebesgue decomposition for the positive measures, the Lebesgue 
decomposition between a signed measure and a positive measure states that, 
given a signed measure $s$ and a $\sigma$-finite measure $\mu$, there exists 
a measurable function $f : \alpha \to \mathbb{R}$ and a signed measure $t$, such 
that $t \perp \mu$ and $s = t + f\mu$.
While this version of the Lebesgue decomposition was also represented as a class, 
the statement itself was modified to be an equivalent, yet easier to work with 
statement. Namely, a signed measure $s$ has Lebesgue decomposition with respect to 
a measure $\mu$ if both parts of the Jordan decomposition of $s$ have Lebesgue 
decomposition to $\mu$.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="n"&gt;have_lebesgue_decomposition&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;signed_measure&lt;/span&gt; &lt;span class="n"&gt;α&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;μ&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;measure&lt;/span&gt; &lt;span class="n"&gt;α&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Prop&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos_part&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;s.to_jordan_decomposition.pos_part.have_lebesgue_decomposition&lt;/span&gt; &lt;span class="n"&gt;μ&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;neg_part&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;s.to_jordan_decomposition.neg_part.have_lebesgue_decomposition&lt;/span&gt; &lt;span class="n"&gt;μ&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;By the same rationale, the singular part and the Radon-Nikodym derivative of the 
decomposition are defined similarly.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;singular_part&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;signed_measure&lt;/span&gt; &lt;span class="n"&gt;α&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;μ&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;measure&lt;/span&gt; &lt;span class="n"&gt;α&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;signed_measure&lt;/span&gt; &lt;span class="n"&gt;α&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s.to_jordan_decomposition.pos_part.singular_part&lt;/span&gt; &lt;span class="n"&gt;μ&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_signed_measure&lt;/span&gt; &lt;span class="bp"&gt;-&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s.to_jordan_decomposition.neg_part.singular_part&lt;/span&gt; &lt;span class="n"&gt;μ&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_signed_measure&lt;/span&gt;

&lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;radon_nikodym_deriv&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;signed_measure&lt;/span&gt; &lt;span class="n"&gt;α&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;μ&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;measure&lt;/span&gt; &lt;span class="n"&gt;α&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;α&lt;/span&gt; &lt;span class="bp"&gt;→&lt;/span&gt; &lt;span class="n"&gt;ℝ&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="bp"&gt;λ&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s.to_jordan_decomposition.pos_part.radon_nikodym_deriv&lt;/span&gt; &lt;span class="n"&gt;μ&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_real&lt;/span&gt; &lt;span class="bp"&gt;-&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s.to_jordan_decomposition.neg_part.radon_nikodym_deriv&lt;/span&gt; &lt;span class="n"&gt;μ&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_real&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Using these definitions, the Lebesgue decomposition theorem was proved easily 
and thus, also the Radon-Nikodym theorem for signed measures. Most importantly, 
however, as these definition do not require an absolutely continuous condition, 
it was possible to prove uniqueness properties about the Radon-Nikodym derivative 
with minimal constraints.  &lt;/p&gt;
&lt;p&gt;As the Radon-Nikodym theorem is central to many concepts in probability theory, 
a brand new territory in mathlib is now available for us to explore,&lt;br&gt;
and with &lt;a href="https://github.com/leanprover-community/mathlib/pull/9065"&gt;PR #9065&lt;/a&gt; 
merged into mathlib, a new journey seems about to begin. &lt;/p&gt;&lt;/div&gt;</description><guid>https://leanprover-community.github.io/blog/posts/the-radon-nikodym-theorem-in-lean/</guid><pubDate>Wed, 22 Sep 2021 10:51:14 GMT</pubDate></item><item><title>Alex Best’s type class generalization paper</title><link>https://leanprover-community.github.io/blog/posts/alex-bests-type-class-generalization-paper/</link><dc:creator>Patrick Massot</dc:creator><description>&lt;div&gt;&lt;p&gt;Alex J. Best wrote a 
&lt;a href="https://easychair.org/publications/preprint/KLfT"&gt;paper about type class generalization&lt;/a&gt; for the 
&lt;a href="https://cicm-conference.org/2021/"&gt;CICM 2021&lt;/a&gt; conference on intelligent computer
mathematics. &lt;/p&gt;
&lt;p&gt;When producing large formally verified mathematical developments that
make use of typeclasses as in mathlib, it is easy to introduce overly strong
assumptions for theorems and definitions. This paper considers the problem of
recognizing from the elaborated proof terms when typeclass assumptions
are stronger than necessary. It uses a Lean metaprogram that finds and
informs the user about possible generalizations.&lt;/p&gt;
&lt;p&gt;A nice example from the paper deals with the following theorem stating that
given a ring homomorphism between two fields and a natural number $p$, one of the
fields has characteristic p if and only if the other has characteristic $p$
(including $p = 0$):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kd"&gt;lemma&lt;/span&gt; &lt;span class="n"&gt;ring_hom.char_p_iff_char_p&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Type&lt;/span&gt;&lt;span class="bp"&gt;∗&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="bp"&gt;→+∗&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ℕ&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;char_p&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="bp"&gt;↔&lt;/span&gt; &lt;span class="n"&gt;char_p&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt;
&lt;span class="kd"&gt;begin&lt;/span&gt;
  &lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="bp"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;introI&lt;/span&gt; &lt;span class="n"&gt;_c&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;constructor&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;intro&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;rw&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;←&lt;/span&gt; &lt;span class="bp"&gt;@&lt;/span&gt;&lt;span class="n"&gt;char_p.cast_eq_zero_iff&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;_c&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;←&lt;/span&gt; &lt;span class="n"&gt;f.injective.eq_iff&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f.map_nat_cast&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;f.map_zero&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We see that the proof script splits the iff statement into each direction, but
both directions are proved by the same tactic block. It is non-trivial to
determine just by reading the proof given what the weakest assumptions possible
are, and it is not immediately clear from the statement either.
The meta-program determined these are that $K$ should be a division ring, and $L$
should be a nontrivial semiring.&lt;/p&gt;&lt;/div&gt;</description><guid>https://leanprover-community.github.io/blog/posts/alex-bests-type-class-generalization-paper/</guid><pubDate>Sun, 19 Sep 2021 19:04:01 GMT</pubDate></item><item><title>Yury Kudryashov’s rotation number paper</title><link>https://leanprover-community.github.io/blog/posts/yury-kudryashovs-rotation-number-paper/</link><dc:creator>Patrick Massot</dc:creator><description>&lt;div&gt;&lt;p&gt;Yury Kudryashov wrote a 
&lt;a href="https://easychair.org/publications/preprint/38w1"&gt;paper about the rotation number&lt;/a&gt; for the 
&lt;a href="https://cicm-conference.org/2021/"&gt;CICM 2021&lt;/a&gt; conference on intelligent computer
mathematics. &lt;/p&gt;
&lt;p&gt;Rotation number is the key numerical invariant of an orientation
preserving circle homeomorphism.  Circle self-maps $f : S^1 → S^1$, 
$S^1 = ℝ/ℤ$, constitute an important class of dynamical systems. They
appear in applications, e.g., as Poincaré maps of continuous flows on
the $2$-torus.  The simplest circle self-maps are pure rotations 
$x ↦ x + a$. It turns out that any circle homeomorphism f is semiconjugate 
to a pure rotation $x ↦ x + τ(f)$. The number $τ(f)$ is called the
rotation number of $f$.&lt;/p&gt;
&lt;p&gt;This paper describes the current state of an ongoing project with aim to
formalize various facts about circle dynamics in Lean. Currently, the
formalized material includes the definition and basic properties of the
translation number of a lift of a circle homeomorphism to the real line.
Yury Kudryashov also formalized a theorem by Étienne Ghys that gives a
necessary and sufficient condition for two actions of a group on the
circle by homeomorphism to be semiconjugate to each other.&lt;/p&gt;&lt;/div&gt;</description><guid>https://leanprover-community.github.io/blog/posts/yury-kudryashovs-rotation-number-paper/</guid><pubDate>Sun, 19 Sep 2021 16:46:20 GMT</pubDate></item><item><title>Sébastien Gouëzel’s Gromov-Hausdorff Space paper</title><link>https://leanprover-community.github.io/blog/posts/sebastien-gouezels-gromov-hausdorff-space-paper/</link><dc:creator>Patrick Massot</dc:creator><description>&lt;div&gt;&lt;p&gt;Sébastien Gouëzel wrote a &lt;a href="https://easychair.org/publications/preprint/sD76"&gt;paper about the Gromov-Hausdorff space&lt;/a&gt; for the 
&lt;a href="https://cicm-conference.org/2021/"&gt;CICM 2021&lt;/a&gt; conference on intelligent computer
mathematics. &lt;/p&gt;
&lt;p&gt;The Gromov-Hausdorff space is the space of all nonempty compact metric
spaces up to isometry. It has been introduced by Gromov, and plays now
an important role in branches of geometry and probability theory. Its
intricate nature of a space of equivalence classes of spaces gives rise
to interesting formalization questions, both from the point of view of
the interface with the rest of the library and on design choices for
definitions and proofs.&lt;/p&gt;
&lt;p&gt;Section 1 gives a purely mathematical description of the
Gromov-Hausdorff space and its salient features.  Section 2 gives an
overview of the formalization. The last three sections are devoted to
specific interesting points that were raised during this formalization.
More specifically, Section 3 discusses the possible choices of
definition for the Gromov-Hausdorff space. Section 4 explains how
preexisting gaps in the mathlib library had to be filled to show that
the Gromov-Hausdorff distance is realized.  Section 5 focuses on a
particularly subtle inductive construction involved in the proof of the
completeness of the Gromov-Hausdorff space, and the shortcomings of Lean
3 that had to be circumvented to formalize it&lt;/p&gt;&lt;/div&gt;</description><guid>https://leanprover-community.github.io/blog/posts/sebastien-gouezels-gromov-hausdorff-space-paper/</guid><pubDate>Sun, 19 Sep 2021 16:34:11 GMT</pubDate></item><item><title>This month in mathlib (Aug 2021)</title><link>https://leanprover-community.github.io/blog/posts/month-in-mathlib-aug-2021/</link><dc:creator>Mathlib community</dc:creator><description>&lt;div&gt;&lt;p&gt;This post summarizes some of the activity that happened in mathlib in August.&lt;/p&gt;
&lt;h3&gt;Highlighted PRs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/8652"&gt;PR #8652&lt;/a&gt;: chore(*): update lean to 3.32.1&lt;br&gt;
  The community fork of Lean made two new
  &lt;a href="https://github.com/leanprover-community/lean/blob/master/doc/changes.md#3321c-12-august-2021"&gt;releases&lt;/a&gt;
  &lt;code&gt;3.32.0&lt;/code&gt; and &lt;code&gt;3.32.1&lt;/code&gt;.
  This is part of the preparations for porting mathlib to Lean 4.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/8281"&gt;PR #8281&lt;/a&gt;:  continuous and smooth partition of unity&lt;br&gt;
  See the &lt;a href="https://leanprover-community.github.io/blog/posts/month-in-mathlib-aug-2021/continuous-partitions-of-unity/"&gt;companion blogpost&lt;/a&gt; for details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Radon-Nikodym and Lebesgue decomposition. The four PRs
  &lt;a href="https://github.com/leanprover-community/mathlib/pull/8645"&gt;PR #8645&lt;/a&gt;
  &lt;a href="https://github.com/leanprover-community/mathlib/pull/8687"&gt;PR #8687&lt;/a&gt;
  &lt;a href="https://github.com/leanprover-community/mathlib/pull/8763"&gt;PR #8763&lt;/a&gt;
  &lt;a href="https://github.com/leanprover-community/mathlib/pull/8875"&gt;PR #8875&lt;/a&gt;
  together contribute
  the Lebesgue decomposition for sigma-finite measures
  and the Radon-Nikodym theorem.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/7978"&gt;PR #7978&lt;/a&gt;: strong version of FTC-2&lt;br&gt;
  This weakens considerably the assumptions of part of the fundamental theorem of calclus: 
  $\int _{a}^{b}f'(x)\,dx=f(b)-f(a)$,
  replacing continuity of $f'$ by the much more natural assumption of integrability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/4885"&gt;PR #4885&lt;/a&gt;:  general adjoint functor theorem:
  If $G : D ⇒ C$ preserves limits and $D$ has limits, and satisfies the solution set condition,
  then it has a left adjoint.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/8692"&gt;PR #8692&lt;/a&gt;:  finite fields exist&lt;br&gt;
  Most of this PR had been lying around for ages,
  but it was finally put together in mathlib.
  It shows the existence and uniqueness up to isomorphism of a finite field with cardinal $p^n$
  for any prime number $p$ and positive integer $n$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Among several PRs from the &lt;a href="https://github.com/lean-forward/class-number"&gt;Dedekind project&lt;/a&gt;, the two most noteworthy are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/8530"&gt;PR #8530&lt;/a&gt;:  ideals in a Dedekind domain have unique factorization&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/8626"&gt;PR #8626&lt;/a&gt;:  define the ideal class group  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/8377"&gt;PR #8377&lt;/a&gt;:  new file&lt;br&gt;
  This PR defines the complex upper half plane, together with the $\mathrm{SL}_2$-action.&lt;br&gt;
  Upcoming PRs will characterize the fundamental domain of the $\mathrm{SL}_2(\mathbb{Z})$-action.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Other mathematical contributions&lt;/h3&gt;
&lt;p&gt;The following PRs are ordered by the date that they were merged into mathlib.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/8424"&gt;PR #8424&lt;/a&gt;:  prove that complex functions are conformal if and only if the functions are holomorphic/antiholomorphic with nonvanishing differential&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/8560"&gt;PR #8560&lt;/a&gt;:  Add the Kronecker product&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/8388"&gt;PR #8388&lt;/a&gt;:  signed version of the Hahn decomposition theorem&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/8588"&gt;PR #8588&lt;/a&gt;:  Smith normal form for submodules over a PID
  This PR is a step towards the classification of finite type modules over a PID.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/8266"&gt;PR #8266&lt;/a&gt;:  Stieltjes measures associated to monotone functions&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/8598"&gt;PR #8598&lt;/a&gt;:  add definition and first lemmas about weak-star topology&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/8639"&gt;PR #8639&lt;/a&gt;:  prove Haar measure = Lebesgue measure on $ℝ$&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/8558"&gt;PR #8558&lt;/a&gt;:  add working definition of elliptic curve&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/8538"&gt;PR #8538&lt;/a&gt;:  add nilpotent groups&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/8343"&gt;PR #8343&lt;/a&gt;:  generalize inequalities and invariance of dimension to arbitrary rings&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/8791"&gt;PR #8791&lt;/a&gt;:  volume of a (closed) $L^∞$-ball&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/leanprover-community/mathlib/pull/8576"&gt;PR #8576&lt;/a&gt;:  define exponential in a Banach algebra and prove basic results&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><guid>https://leanprover-community.github.io/blog/posts/month-in-mathlib-aug-2021/</guid><pubDate>Tue, 31 Aug 2021 06:56:51 GMT</pubDate></item><item><title>Continuous partitions of unity</title><link>https://leanprover-community.github.io/blog/posts/continuous-partitions-of-unity/</link><dc:creator>Patrick Massot</dc:creator><description>&lt;div&gt;&lt;p&gt;In &lt;a href="https://github.com/leanprover-community/mathlib/pull/8281"&gt;PR #8281&lt;/a&gt;, Yury
Kudryashov completed his work on continuous and smooth partitions of unity.&lt;/p&gt;
&lt;p&gt;A continuous partition of unity on a topological space $X$ is a collection of continuous functions
$f_i : X → ℝ$ such that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the supports of $f_i$ form a locally finite family of sets, i.e., for every point $x$ in $X$, there
  exists a neighborhood $U$ of $x$ such that all but finitely many functions $f_i$ are zero on $U$;&lt;/li&gt;
&lt;li&gt;the functions $f_i$ are nonnegative;&lt;/li&gt;
&lt;li&gt;the sum $\sum_i f_i(x)$ is equal to one for all $x$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While the above definition is completely standard, it is often useful to have a collection of
functions that act as a paritition of unity only on some part $s$ of $X$. In that more general case,
we keep the above two conditions everywhere but ask that the sum in the last item equals one on $s$
and is less than or equal to one everywhere. This is encoded in the following Lean structure, from
&lt;code&gt;topology.partition_of_unity&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="kd"&gt;structure&lt;/span&gt; &lt;span class="n"&gt;partition_of_unity&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ι&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Type&lt;/span&gt;&lt;span class="bp"&gt;*&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;topological_space&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;univ&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_fun&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ι&lt;/span&gt; &lt;span class="bp"&gt;→&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ℝ&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;locally_finite'&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;locally_finite&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;λ&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;support&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_fun&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)))&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nonneg'&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="bp"&gt;≤&lt;/span&gt; &lt;span class="n"&gt;to_fun&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum_eq_one'&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;∀&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="bp"&gt;∈&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;∑ᶠ&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to_fun&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="bp"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum_le_one'&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;∀&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;∑ᶠ&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to_fun&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="bp"&gt;≤&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The main result from that file is then the following existence theorem.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span class="sd"&gt;/-- If `X` is a paracompact normal topological space and `U` is an open covering of a closed set&lt;/span&gt;
&lt;span class="sd"&gt;`s`, then there exists a `partition_of_unity ι X s` that is subordinate to `U`. -/&lt;/span&gt;
&lt;span class="kd"&gt;lemma&lt;/span&gt; &lt;span class="n"&gt;exists_is_subordinate&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;normal_space&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;paracompact_space&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hs&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;is_closed&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ι&lt;/span&gt; &lt;span class="bp"&gt;→&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ho&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;∀&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_open&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hU&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="bp"&gt;⊆&lt;/span&gt; &lt;span class="bp"&gt;⋃&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;U&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="bp"&gt;∃&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;partition_of_unity&lt;/span&gt; &lt;span class="n"&gt;ι&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f.is_subordinate&lt;/span&gt; &lt;span class="n"&gt;U&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><guid>https://leanprover-community.github.io/blog/posts/continuous-partitions-of-unity/</guid><pubDate>Sat, 07 Aug 2021 19:49:56 GMT</pubDate></item><item><title>Eric Wieser's scalar action paper</title><link>https://leanprover-community.github.io/blog/posts/eric-wiesers-scalar-action-paper/</link><dc:creator>Patrick Massot</dc:creator><description>&lt;div&gt;&lt;p&gt;Eric Wieser wrote a &lt;a href="https://easychair.org/publications/preprint/mC9X"&gt;paper about scalar actions in mathlib&lt;/a&gt; for the 
&lt;a href="https://cicm-conference.org/2021/"&gt;CICM 2021&lt;/a&gt; conference on intelligent computer
mathematics. &lt;/p&gt;
&lt;p&gt;Scalar actions are everywhere in mathematics. There are so many of
them that a given type can easily get several ones from different origins. For instance
$ℤ$ acts on itself by left multiplication but it also has the $ℤ$ scalar action
that every additive group has, by repeated addition or subtraction.
In general those multiple actions can be proven to be equal, but type class
inference needs definitional equality. So a great deal of care has been taken,
by Eric and others, when setting up the algebraic hierarchy in mathlib. &lt;/p&gt;
&lt;p&gt;The paper tells this fascinating story and is recommended for anyone interested
in multiple inheritance handling in Lean 3 type class system.&lt;/p&gt;&lt;/div&gt;</description><guid>https://leanprover-community.github.io/blog/posts/eric-wiesers-scalar-action-paper/</guid><pubDate>Sat, 07 Aug 2021 19:42:32 GMT</pubDate></item><item><title>Welcome to the Lean community blog!</title><link>https://leanprover-community.github.io/blog/posts/welcome-to-the-lean-community-blog/</link><dc:creator>The Lean prover community</dc:creator><description>&lt;div&gt;&lt;p&gt;This is our brand new blog where you'll be able to find news about what is
happening in the Lean prover community. It will feature:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;posts highlighting some new contributions to mathlib&lt;/li&gt;
&lt;li&gt;news about ongoing projects such as the Liquid tensor experiment or the sphere eversion project&lt;/li&gt;
&lt;li&gt;news about exciting developments in other proofs assistants&lt;/li&gt;
&lt;li&gt;announcements of conferences and talks &lt;/li&gt;
&lt;li&gt;some explanations of specific topics in a less formal context than the documentations&lt;/li&gt;
&lt;li&gt;speculations about future developments or somewhat philosophical discussions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is no predefined list of authors. Everybody can submit a pull-request
with a post. If you are unsure whether your post will be welcome then don't
hesitate to first discuss the topic of your post on Zulip before investing too
much time writing it.&lt;/p&gt;&lt;/div&gt;</description><guid>https://leanprover-community.github.io/blog/posts/welcome-to-the-lean-community-blog/</guid><pubDate>Sat, 07 Aug 2021 19:36:54 GMT</pubDate></item></channel></rss>